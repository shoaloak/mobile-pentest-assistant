#!/usr/bin/env python3
"""
Copyright (C) 2024 Axel Koolhaas

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import atexit
import signal
import sys
from typing import List
import device
import device.manager

# Global list of connected devices
devices: List[device.BaseDevice] = []

def exit_handler():
    """Handle clean exit"""
    for device in devices:
        device.disconnect()
    print("Exiting...")

def ctrl_c_handler(signum, frame):
    """Handle Ctrl+C (SIGINT)"""
    exit_handler()
    sys.exit(1)

def exception_handler(exception_type, exception, traceback):
    """Handle uncaught exceptions"""
    print(f"Exception: {exception_type.__name__}: {exception}")
    exit_handler()

'''
# FUTURE
def monitor_devices():
    """Monitor for device changes in the background"""
    while True:
        # Check for device changes
        current_android_devices = get_android_devices()
        current_ios_devices = get_ios_devices()
        
        # If there's a change, update the main menu or notify the user
        # This is where you might refresh your device list or user interface
        
        # Wait a bit before checking again
        time.sleep(5)

# Set up and start the device monitoring thread
monitoring_thread = threading.Thread(target=monitor_devices)
monitoring_thread.daemon = True
monitoring_thread.start()
'''

def banner() -> str:
    print("""
 _______  _____  _______
 |  |  | |_____] |_____|
 |  |  | |       |     |
 Automate your mobsec flow

""")

if __name__ == '__main__':
    banner()
    #TODO add argparse
    #TODO license first time run

    print("Initializing...")
    devices.extend(device.manager.get_android_devices())
    #devices.extend(device.manager.get_ios_devices())
    #devices.extend(device.manager.get_devices())

    # Ensure clean exit
    atexit.register(exit_handler)
    signal.signal(signal.SIGINT, ctrl_c_handler)
    sys.excepthook = exception_handler

    print(device.BaseDevice())
    print('-'*80)
    for device in devices:
        print(device)
        #device.mirror_screen()
        device.http_redirect_enable()
    
    for device in devices:
        print(f"{device.execute_transient_command('whoami')}")