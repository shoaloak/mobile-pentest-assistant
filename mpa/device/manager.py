"""
Copyright (C) 2024 Axel Koolhaas

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import subprocess
import device
import shutil
from device import BaseDevice
from device.android import AndroidDevice
from device.ios import IosDevice

class DeviceManager():
    """ Object that manages mobile devices """

    def __init__(self):
        self.devices: List[BaseDevice] = []

        self.hasAndroidDependencies = False
        self.hasIosDependencies = False


    def check_dependencies(self):
        ''' Check dependencies and remember support for mobile device types '''
        
        # Android support requires ADB
        if not shutil.which('adb'):
            self.hasAndroidDependencies = False
        else:
            self.hasAndroidDependencies = True

        # Ios support requires libimobiledevice
        if not shutil.which('idevice_id'):
            self.hasIosDependencies = False
        else:
            self.hasIosDependencies = True


    def get_android_devices(self):

        if self.hasAndroidDependencies:

            # List Android device IDs
            result = subprocess.run(
                ['adb', 'devices'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True)
            # Skip the first line of the output which is a header
            lines = result.stdout.strip().split('\n')[1:]
            ids = []
            for line in lines:
                # Ensure the line has a tab, which separates the ID and the status
                if "\t" in line:
                    device_id, _ = line.split("\t")
                    ids.append(device_id)

            # Create AndroidDevices for all IDs
            for AndroidDeviceID in ids:
                self.devices.append(device.AndroidDevice(AndroidDeviceID))


    def get_ios_devices(self):

        if self.hasAndroidDependencies:

            # List device IDs
            result = subprocess.check_output(["idevice_id", "--list"])
            ids = result.decode('utf-8').strip().split('\n')

            # Create IosDevices for all IDs
            # Ensure id is not empty
            self.devices += [IosDevice(id) for id in ids if id] 


    def get_devices(self):
        self.get_android_devices()
        self.get_ios_devices()