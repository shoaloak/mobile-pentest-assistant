#
# Copyright (C) 2024 Axel Koolhaas
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import pkg_resources
import subprocess
import logging
import shutil
from device import BaseDevice
from device.android import AndroidDevice
from device.ios import IosDevice

class DeviceManager():
    """Object that manages mobile devices."""

    def __init__(self):
        self.devices: list[BaseDevice] = []

        self.has_android_dependencies = False
        self.has_ios_dependencies = False
        self.has_frida = False
        self.frida_version = None
    
    def initialize(self) -> bool:
        """Initialize the device manager."""

        # Check for host dependencies
        if not self.check_host_depencencies():
            logging.error("Not all host dependencies are met. Exiting.")
            return False

        # Get all connected devices
        if not self.add_devices():
            logging.error("Failed to get connected devices. Exiting.")
            return False

        # TODO: verify attached devices

        return True

    def check_host_depencencies(self) -> bool:
        has_deps = True

        # Frida
        try:
            frida_distrib = pkg_resources.get_distribution('frida')
            self.frida_version = frida_distrib.version
            self.has_frida = True
        except pkg_resources.DistributionNotFound:
            logging.warning("Frida is not installed. Please install frida-tools.")
            self.has_frida = False
            has_deps = False
        
        # Android
        self.has_android_dependencies = shutil.which('adb') is not None
        if not self.has_android_dependencies:
            logging.warning("ADB not found. Please install Android SDK Platform Tools.")
            has_deps = False

        # iOS
        self.has_ios_dependencies = shutil.which('idevice_id') is not None
        if not self.has_ios_dependencies:
            logging.warning("idevice_id not found. Please install libimobiledevice.")
            has_deps = False

        return has_deps

    def add_android_devices(self) -> bool:
        """Add Android devices to the device list."""
        if not self.has_android_dependencies:
            return False

        try:
            # List Android devices
            result = subprocess.check_output(["adb", "devices"], text=True)
            lines = result.strip().split('\n')[1:] # Skip header line

            ids = []
            for line in lines:
                # Ensure the line has a tab, which separates the ID and the status
                if "\t" in line:
                    device_id, _ = line.split("\t")
                    ids.append(device_id)

            # Create AndroidDevices for all IDs
            self.devices.extend([AndroidDevice(id) for id in ids])
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to get Android devices. {e}")
            return False

        return True

    def add_ios_devices(self) -> bool:
        """Add iOS devices to the device list."""
        if not self.has_ios_dependencies:
            return False

        try:
            # List iOS devices
            result = subprocess.check_output(["idevice_id", "--list"],
                                             text=True)
            ids = result.strip().split('\n')

            # Create IosDevices for all IDs, and ensure id is not empty
            self.devices.extend([IosDevice(id) for id in ids if id])
        except subprocess.CalledProcessError as e:
            logging.error(f"Failed to get iOS devices. {e}")
            return False

        return True

    def add_devices(self, clear=True) -> bool:
        """Add all connected devices to the device list."""
        if clear:
            # Clear device list to avoid duplicates
            self.devices.clear()

        android_success = self.add_android_devices()
        ios_success = self.add_ios_devices()

        return android_success and ios_success